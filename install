#!/bin/bash
export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-gnu-
QEMU=$(which qemu-aarch64-static)
ROOT=$(dirname $(dirname $(realpath $0)))/duet-linux
DEVICE=$1
case $2 in
	-build) 
		echo "Building kernel for USB target"
		rm -rf $ROOT/builds
		mkdir $ROOT/builds
		echo "Rebuilding kernel..."
		curl -L "$(curl -sL https://www.kernel.org/ | grep "Download complete tarball" | head -n1 | tr '"' ' ' | awk '{print $3}')" -o $ROOT/builds/Linux-archive
		cd $ROOT/builds
		mkdir linux
		tar xvf Linux-archive --strip-components=1 -C linux
		cd linux
		case $4 in
		-krane)
			#todo: test if these are even needed
			for x in $(ls $ROOT/kernel/patches/*.patch); do
				echo "Applying $x"
				patch -p1 --forward < $x
			done
			cp $ROOT/kernel/krane.config $ROOT/builds/linux/.config
			make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- menuconfig
			make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) 
			mkdir $ROOT/assembly
			cd $ROOT/assembly
			cp "$ROOT/kernel/krane/kernel.its" $ROOT/assembly/kernel.its
			cp "$ROOT/kernel/krane/cmdline" $ROOT/assembly/cmdline
			cp "$ROOT/builds/linux/arch/arm64/boot/Image" $ROOT/assembly
			cp "$ROOT/builds/linux/arch/arm64/boot/Image.gz" $ROOT/assembly
			cp "$ROOT/builds/linux/arch/arm64/boot/dts/mediatek/mt8183-kukui-krane-sku0.dtb" $ROOT/assembly	
			cp "$ROOT/builds/linux/arch/arm64/boot/dts/mediatek/mt8183-kukui-krane-sku176.dtb" $ROOT/assembly
			;;
		-nyan)
			cp $ROOT/kernel/krane.config $ROOT/builds/linux/.config
			make ARCH=arm CROSS_COMPILE=arm-linux-gnu- menuconfig
			make ARCH=arm CROSS_COMPILE=arm-linux-gnu- -j$(nproc) 
			mkdir $ROOT/assembly
			cd $ROOT/assembly
			cp "$ROOT/kernel/nyan/kernel.its" $ROOT/assembly/kernel.its
			cp "$ROOT/kernel/nyan/cmdline" $ROOT/assembly/cmdline #Doesn't exist yet
			cp "$ROOT/builds/linux/arch/arm/boot/Image" $ROOT/assembly
			cp "$ROOT/builds/linux/arch/arm/boot/Image.gz" $ROOT/assembly
			cp "$ROOT/builds/linux/arch/arm/boot/dts/tegra124-nyan-big.dtb" $ROOT/assembly	
			;;
		esac
		
		dd if=/dev/zero of=bootloader.bin bs=512 count=1
		mkimage -D "-I dts -O dtb -p 2048" -f kernel.its vmlinux.uimg
		vbutil_kernel --pack vmlinux.img \
			--version 1 \
			--vmlinuz vmlinux.uimg \
			--arch arm \
			--keyblock /usr/share/vboot/devkeys/kernel.keyblock \
			--signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk \
			--config cmdline \
			--bootloader bootloader.bin
		mkdir "$ROOT/fin"
		cp vmlinux.img "$ROOT/fin/"
		# make partition table. blatantly stolen from Cadmium because its realistically the easiest way to do it.
		if [[ -e $1 ]]; then
			echo "Creating 3 partitions on $1"
			DEVICE=$1
			KERNEL=${DEVICE}1
			KERNEL2=${DEVICE}2
			ROOTFS=${DEVICE}3
		fi
		dd if=/dev/zero of=$1 bs=1M count=64
		parted --script $DEVICE mklabel gpt 
		cgpt create $1
		cgpt add -i 1 -t kernel -b 8192		-s 65536 -l SDKernelA -S 1 -T 2 -P 10 $DEVICE
		echo "Kernel part"
		cgpt add -i 2 -t kernel -b 73728	-s 65536 -l SDKernelB -S 0 -T 2 -P 5 $DEVICE
		echo "Kernel part 2"
		cgpt add -i 3 -t data -b 139264		-s $(expr $(cgpt show $1 | grep 'Sec GPT table' | awk '{print $1}') - 139264) -l Root $DEVICE
		echo "Rootfs part"
		sync
		partx -a $DEVICE >/dev/null 2>&1
		dd if="$ROOT/fin/vmlinux.img" of="$KERNEL"
		dd if="$ROOT/fin/vmlinux.img" of="$KERNEL2"
		mkfs.ext4 -F $ROOTFS
		mount $ROOTFS /mnt 
		
		;;
	-nobuild)
		echo "Not rebuilding kernel for USB target"
		if [[ -e $1 ]]; then
			echo "Creating 3 partitions on $1"
			DEVICE=$1
			KERNEL=${DEVICE}1
			KERNEL2=${DEVICE}2
			ROOTFS=${DEVICE}3
		fi
		# make partition table. blatantly stolen from Cadmium because its realistically the easiest way to do it.
		parted --script $DEVICE mklabel gpt 
		cgpt create $1
		cgpt add -i 1 -t kernel -b 8192		-s 65536 -l SDKernelA -S 1 -T 2 -P 10 $DEVICE
		echo "Kernel part"
		cgpt add -i 2 -t kernel -b 73728	-s 65536 -l SDKernelB -S 0 -T 2 -P 5 $DEVICE
		echo "Kernel part 2"
		cgpt add -i 3 -t data -b 139264		-s $(expr $(cgpt show $1 | grep 'Sec GPT table' | awk '{print $1}') - 139264) -l Root $DEVICE
		echo "Rootfs part"
		sync
		partx -a $DEVICE >/dev/null 2>&1
		dd if="$ROOT/fin/vmlinux.img" of="$KERNEL"
		dd if="$ROOT/fin/vmlinux.img" of="$KERNEL2"
		mkfs.ext4 -F $ROOTFS
		mount $ROOTFS /mnt
		;;

	-local)
		echo "Installing to local eMMC"
		MMC=$1
		KERNEL=${MMC}1
		KERNEL2=${MMC}2
		ROOTFS=${MMC}3
		dd if=/dev/zero of=$MMC bs=512k count=128 seek=0
		parted --script $MMC mklabel gpt 
		cgpt create $1
		cgpt add -i 1 -t kernel -b 8192		-s 65536 -l MMCKernelA -S 1 -T 2 -P 10 $MMC
		echo "eMMC kernel"
		cgpt add -i 2 -t kernel -b 73728	-s 65536 -l MMCKernelB -S 0 -T 2 -P 5 $MMC
		echo "Kernel part 2"	
		cgpt add -i 3 -t data -b 139264		-s $(expr $(cgpt show $1 | grep 'Sec GPT table' | awk '{print $1}') - 139264) -l Root $MMC
		echo "Rootfs part"	
		sync
		ROOTFS=/dev/disk/by-partlabel/Root
		KERNPART=/dev/disk/by-partlabel/MMCKernelA
		partx -a $MMC >/dev/null 2>&1
		dd if=/dev/disk/by-partlabel/SDKernelA of=/dev/disk/by-partlabel/MMCKernelA
		mkfs.ext4 -F $ROOTFS
		mount $ROOTFS /mnt 
		;;
	esac

#ROOTFS
case $3 in	
	-alpine)
		mkdir $ROOT/rootfs 
		cd $ROOT/rootfs
		mount $ROOTFS /mnt
		#temporary testing: TODO use qemu to fix some glaring issues prior to first boot, and switch rootfs.
		wget https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/aarch64/alpine-minirootfs-3.15.0-aarch64.tar.gz
		tar xzvpf $ROOT/rootfs/alpine-minirootfs-3.15.0-aarch64.tar.gz -C /mnt/ #this doesn't work currently, although it *does* boot. 
		cd $ROOT/builds/linux
		make INSTALL_MOD_PATH=/mnt modules_install
		sed -i 's/root\:\*/root\:\$6\$I9Q9AyTL\$Z76H7wD8mT9JAyrp\/vaYyFwyA5wRVN0tze8pvM\.MqScC7BBm2PU7pLL0h5nSxueqUpYAlZTox4Ag2Dp5vchjJ0/' /mnt/etc/shadow #this is supposed to set the password as 'gentoo' but doesn't like to
		umount $ROOTFS
		echo "Alpine rootfs installed"
		;;
	-gentoo)
		mkdir $ROOT/rootfs 
		cd $ROOT/rootfs
		mount $ROOTFS /mnt
		#temporary testing: TODO use qemu to fix some glaring issues prior to first boot, and switch rootfs.
		wget https://bouncer.gentoo.org/fetch/root/all/releases/arm64/autobuilds/20220220T235324Z/stage3-arm64-openrc-20220220T235324Z.tar.xz
		tar xvpf $ROOT/rootfs/stage3-arm64-openrc-20220220T235324Z.tar.xz -C /mnt/ #this doesn't work right currently, although it *does* boot.
		echo "ACCEPT_KEYWORDS=\"arm64\"" >> /mnt/etc/portage/make.conf 
		echo "MAKEOPTS=\"-j4\"" >> /mnt/etc/portage/make.conf 
		sed -i 's/root\:\*/root\:\$6\$I9Q9AyTL\$Z76H7wD8mT9JAyrp\/vaYyFwyA5wRVN0tze8pvM\.MqScC7BBm2PU7pLL0h5nSxueqUpYAlZTox4Ag2Dp5vchjJ0/' /mnt/etc/shadow #this sets password as 'gentoo'
		cd $ROOT/builds/linux
		make INSTALL_MOD_PATH=/mnt modules_install
		umount $ROOTFS	
		echo "Gentoo rootfs installed"
		;;
	-debian)
		mkdir $ROOT/rootfs 
		cd $ROOT/rootfs
		mount $ROOTFS /mnt
		#temporary testing: TODO use qemu to fix some glaring issues prior to first boot, and switch rootfs.
		debootstrap --arch="arm64" "stable" "/mnt"  https://deb.debian.org/debian/
		cd $ROOT/builds/linux
		make INSTALL_MOD_PATH=/mnt modules_install
		cp $QEMU /mnt
		sed -i 's/root\:\*/root\:\$6\$I9Q9AyTL\$Z76H7wD8mT9JAyrp\/vaYyFwyA5wRVN0tze8pvM\.MqScC7BBm2PU7pLL0h5nSxueqUpYAlZTox4Ag2Dp5vchjJ0/' /mnt/etc/shadow #this sets password as 'gentoo'
		#cp /etc/resolv.conf /mnt/etc/resolv.conf
		chroot /mnt apt update #needs binfmnt and qemu-utils, if it doesn't work just do it manually 
		chroot /mnt apt install -y nano network-manager debootstrap parted libudev-dev build-essential git #needs binfmnt and qemu-utils, if it doesn't work just do it manually 
		umount $ROOTFS	
		echo "Debian rootfs installed"
		;;
	esac
echo "Success"
exit