#!/bin/bash
export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-gnu-

ROOT=$(dirname $(dirname $(realpath $0)))/duet-linux

mkdir $ROOT/builds
curl -L "$(curl -sL https://www.kernel.org/ | grep "Download complete tarball" | head -n1 | tr '"' ' ' | awk '{print $3}')" -o $ROOT/builds/Linux-archive
cd $ROOT/builds
mkdir linux
bsdtar xvf Linux-archive --strip-components=1 -C linux
cd linux
#todo: test if these are even needed
for x in $(ls $ROOT/kernel/patches/*.patch); do
	echo "Applying $x"
	patch -p1 --forward < $x
done

cp $ROOT/kernel/krane.config $ROOT/builds/linux/.config
make menuconfig
make -j$(nproc)

mkdir $ROOT/assembly

cp "$ROOT/kernel/kernel.its" $ROOT/assembly/kernel.its
cp "$ROOT/kernel/cmdline" $ROOT/assembly/cmdline
cp "$ROOT/builds/linux/arch/arm64/boot/Image*" $ROOT/assembly
cp "$ROOT/builds/linux/arch/arm64/boot/dts/mediatek/mt8183-kukui-krane-sku*.dtb" $ROOT/assembly 
dd if=/dev/zero of=bootloader.bin bs=512 count=1
mkimage -D "-I dts -O dtb -p 2048" -f kernel.its vmlinux.uimg
dd if=/dev/zero of=bootloader.bin bs=512 count=1
vbutil_kernel --pack vmlinux.img \
	--version 1 \
	--vmlinuz vmlinux.uimg \
	--arch arm \
	--keyblock /usr/share/vboot/devkeys/kernel.keyblock \
	--signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk \
	--config cmdline \
	--bootloader bootloader.bin

mkdir "$ROOT/fin"
cp vmlinux.img "$ROOT/fin/"
if [[ -e $1 ]]; then
	echo "Creating 3 partitions on $1"
	DEVICE=$1
	KERNEL=${DEVICE}1
	KERNEL2=${DEVICE}2
	ROOTFS=${DEVICE}3
	dd if=/dev/zero of=$DEVICE bs=1M count=64
fi

sync

# make partition table. blatantly stolen from Cadmium because its realistically the easiest way to do it.
parted --script $DEVICE mklabel gpt 
cgpt create $1
cgpt add -i 1 -t kernel -b 8192		-s 65536 -l SDKernelA -S 1 -T 2 -P 10 $DEVICE
echo "Kernel part"
cgpt add -i 2 -t kernel -b 73728	-s 65536 -l SDKernelB -S 0 -T 2 -P 5 $DEVICE
echo "Kernel part 2"
cgpt add -i 3 -t data -b 139264		-s $(expr $(cgpt show $1 | grep 'Sec GPT table' | awk '{print $1}') - 139264) -l Root $DEVICE
echo "Rootfs part"
sync
partx -a $DEVICE >/dev/null 2>&1
dd if="$ROOT/fin/vmlinux.img" of="$KERNEL"
dd if="$ROOT/fin/vmlinux.img" of="$KERNEL2"
mount $ROOTFS /mnt 

mkdir $ROOT/rootfs 
cd $ROOT/rootfs
dd if=/dev/zero of=$ROOTFS bs=1M count=64
mkfs.ext4 -F $ROOTFS
mount $ROOTFS /mnt
#temporary testing
wget https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/aarch64/alpine-minirootfs-3.15.0-aarch64.tar.gz
tar xzvpf $ROOT/rootfs/alpine-minirootfs-3.15.0-aarch64.tar.gz -C /mnt/ #this doesn't work currently, although it *does* boot. 
cd $ROOT/builds/linux
make INSTALL_MOD_PATH=/mnt modules_install
umount $ROOTFS
echo "success"
exit